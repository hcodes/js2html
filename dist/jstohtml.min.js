!function(global,factory){"object"==typeof exports&&"undefined"!=typeof module?module.exports=factory():"function"==typeof define&&define.amd?define(factory):(global=global||self).jstohtml=factory()}(this,function(){"use strict";
/*!
     * jstohtml
     * Â© 2019 Denis Seleznev
     * License: MIT
     *
     * https://github.com/hcodes/jstohtml/
    */var entityMap={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"},escapeRE=/[&<>"'/]/g,Engine={noClosingTag:["img","input","br","embed","source","link","meta","area","command","base","col","param","wbr","hr","keygen"],ignoredKeys:["b","e","m","c","t","cl","class"],isPlainObj:function(obj){return"[object Object]"===Object.prototype.toString.call(obj)},build:function(data){if(null==data)return"";var buf=[];if(this.isPlainObj(data))return this.tag(data);if(Array.isArray(data)){for(var i=0,len=data.length;i<len;i++)buf.push(this.build(data[i]));return buf.join("")}return""+data},tag:function(data){var t=data.t||"div",text="<"+t+this.attrs(data);return-1!==this.noClosingTag.indexOf(t)?text+"/>":(text+=">",data.c&&(text+=this.build(data.c)),text+="</"+t+">")},attrs:function(data){var result,key,b=data.b,e=data.e,m=data.m,buf=[],cl=[];if(b||e){if(b=b||this._currentBlock,e?buf.push(this.elem(b,e)):buf.push(this.block(b)),this.isPlainObj(m)){for(key in m)m.hasOwnProperty(key)&&buf.push(this.elem(b,e,key,m[key]));buf.sort();for(var i=0,len=buf.length;i<len;i++)buf[i]!==buf[i-1]&&cl.push(buf[i])}else cl=buf;result=this.attr("class",cl),this._currentBlock=b}else result=(cl=data.cl||data.class)?this.attr("class",cl):"";for(key in data)data.hasOwnProperty(key)&&-1===this.ignoredKeys.indexOf(key)&&(result+=this.attr(key,data[key]));return result},attr:function(name,value){return null==value||!1===value?"":" "+name+'="'+function(str){return str.replace(escapeRE,function(s){return entityMap[s]})}(Array.isArray(value)?value.join(" "):""+value)+'"'},block:function(block,modName,modVal){return block+this.mod(modName,modVal)},elem:function(block,elemName,modName,modVal){return block+(elemName?"__"+elemName:"")+this.mod(modName,modVal)},mod:function(modName,modVal){return!1===modVal||null==modVal?"":"_"+modName+(""===modVal||!0===modVal?"":"_"+modVal)},reset:function(){return this._currentBlock="",this}};return function(data){return Engine.reset().build(data)}});